#!/bin/sh
set -e

# Function to log messages with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Error handler
handle_error() {
    log "Error occurred in script at line $1"
    exit 1
}

# Set up error handling
trap 'handle_error $LINENO' ERR

log "Starting entrypoint script..."

# Set default environment variables
DB_HOST=${DB_HOST:-"localhost"}
DB_USER=${DB_USER:-"user"}
DB_PASSWORD=${DB_PASSWORD:-"password"}
DB_NAME=${DB_NAME:-"hrportal"}
FRONTEND_PORT=${FRONTEND_PORT:-"80"}
BACKEND_PORT=${BACKEND_PORT:-"5002"}
BACKEND_URL="http://localhost:${BACKEND_PORT}"

log "Environment configuration:"
log "FRONTEND_PORT: $FRONTEND_PORT"
log "BACKEND_PORT: $BACKEND_PORT"
log "BACKEND_URL: $BACKEND_URL"
log "DB_HOST: $DB_HOST"
log "DB_NAME: $DB_NAME"

# Create .env file
log "Creating .env file..."
cat > /app/.env << EOF
VITE_API_URL=/api
VITE_BASE_URL=http://localhost:${FRONTEND_PORT}
DB_HOST=${DB_HOST}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DB_NAME=${DB_NAME}
FRONTEND_PORT=${FRONTEND_PORT}
BACKEND_PORT=${BACKEND_PORT}
BACKEND_URL=${BACKEND_URL}
EOF

# Copy .env to server directory
cp /app/.env /app/server/.env
log "Created .env file and copied to server directory"

# Create server.js symlink if it doesn't exist
if [ ! -f /app/server.js ]; then
    log "Creating server.js symlink..."
    ln -s /app/server/server.js /app/server.js
fi

# Start the backend server
log "Starting backend server on port $BACKEND_PORT..."
cd /app/server
PORT=$BACKEND_PORT node server.js > /var/log/backend.log 2>&1 &
BACKEND_PID=$!

# Wait for backend to be ready
log "Waiting for backend server to start..."
sleep 5

# Verify backend is running
if ! kill -0 $BACKEND_PID 2>/dev/null; then
    log "Error: Backend server failed to start"
    cat /var/log/backend.log
    exit 1
fi

log "Backend server is running with PID $BACKEND_PID"

# Start the frontend server
log "Starting frontend server on port $FRONTEND_PORT..."
cd /app
BACKEND_URL=$BACKEND_URL node frontend-server.js > /var/log/frontend.log 2>&1 &
FRONTEND_PID=$!

# Wait for frontend to be ready
log "Waiting for frontend server to start..."
sleep 5

# Verify frontend is running
if ! kill -0 $FRONTEND_PID 2>/dev/null; then
    log "Error: Frontend server failed to start"
    cat /var/log/frontend.log
    exit 1
fi

log "Frontend server is running with PID $FRONTEND_PID"

# Start socat for port redirection
log "Setting up port redirection: port 5001 -> port $FRONTEND_PORT..."
socat TCP-LISTEN:5001,fork,reuseaddr TCP:localhost:$FRONTEND_PORT > /var/log/socat.log 2>&1 &
SOCAT_PID=$!

# Verify socat is running
if ! kill -0 $SOCAT_PID 2>/dev/null; then
    log "Error: Port redirection failed to start"
    cat /var/log/socat.log
    exit 1
fi

log "Port redirection is running with PID $SOCAT_PID"

# Monitor processes
monitor_processes() {
    while true; do
        if ! kill -0 $BACKEND_PID 2>/dev/null; then
            log "Backend server died. Logs:"
            cat /var/log/backend.log
            exit 1
        fi
        if ! kill -0 $FRONTEND_PID 2>/dev/null; then
            log "Frontend server died. Logs:"
            cat /var/log/frontend.log
            exit 1
        fi
        if ! kill -0 $SOCAT_PID 2>/dev/null; then
            log "Port redirection died. Logs:"
            cat /var/log/socat.log
            exit 1
        fi
        sleep 5
    done
}

# Start monitoring in background
monitor_processes &
MONITOR_PID=$!

# Handle shutdown
trap "log 'Shutting down...'; kill $BACKEND_PID $FRONTEND_PID $SOCAT_PID $MONITOR_PID; exit" SIGTERM SIGINT

# Keep the container running
wait $MONITOR_PID
