name: Deploy Application

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.tf'
      - '.github/workflows/terraform-deploy.yml'
      - 'README.md'
  workflow_run:
    workflows: ["Deploy Infrastructure"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    # Download terraform outputs if this was triggered by the terraform workflow
    - name: Download Terraform Outputs
      if: github.event_name == 'workflow_run'
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: terraform-deploy.yml
        name: terraform-outputs
        path: terraform-outputs
        
    # Read terraform outputs if available
    - name: Read Terraform Outputs
      id: terraform-outputs
      if: github.event_name == 'workflow_run'
      run: |
        if [ -f "terraform-outputs/outputs.json" ]; then
          EC2_PUBLIC_IP=$(jq -r '.ec2_instance_public_ip.value' terraform-outputs/outputs.json)
          RDS_ENDPOINT=$(jq -r '.rds_endpoint.value' terraform-outputs/outputs.json)
          RDS_USERNAME=$(jq -r '.rds_username.value' terraform-outputs/outputs.json)
          
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
          echo "RDS_USERNAME=$RDS_USERNAME" >> $GITHUB_ENV
          
          echo "Found EC2 Public IP: $EC2_PUBLIC_IP" >> $GITHUB_STEP_SUMMARY
          echo "Found RDS Endpoint: $RDS_ENDPOINT" >> $GITHUB_STEP_SUMMARY
        else
          echo "No terraform outputs found, using environment secrets" >> $GITHUB_STEP_SUMMARY
        fi
      
    # Install SSH key
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
        
    # Add the EC2 host key to known hosts
    - name: Add known hosts
      run: |
        EC2_IP="${EC2_PUBLIC_IP:-${{ secrets.EC2_PUBLIC_IP }}}"
        ssh-keyscan -H $EC2_IP >> ~/.ssh/known_hosts
      
    # Build the application
    - name: Build Application
      run: |
        npm ci
        npm run build
      
    # Create deployment package
    - name: Create Deployment Package
      run: |
        mkdir -p deploy
        cp -r dist deploy/
        cp -r server deploy/
        cp package.json deploy/
        
        # Create .env file with database connection info
        cat > deploy/server/.env << EOF
        DB_HOST=${RDS_ENDPOINT:-${{ secrets.RDS_ENDPOINT }}}
        DB_USER=${RDS_USERNAME:-${{ secrets.DB_USERNAME }}}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=hrportal
        PORT=5001
        EOF
        
        # Create deployment script
        cat > deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Install dependencies
        npm install --production
        
        # Install PM2 if not already installed
        if ! command -v pm2 &> /dev/null; then
          npm install -g pm2
        fi
        
        # Start the server using PM2
        cd server
        pm2 stop hrgoat-server || true
        pm2 start server.js --name hrgoat-server
        
        echo "Application deployed successfully!"
        EOF
        
        chmod +x deploy/deploy.sh
        
        # Create archive
        tar -czf deploy.tar.gz -C deploy .
      
    # Deploy to EC2
    - name: Deploy to EC2
      run: |
        EC2_IP="${EC2_PUBLIC_IP:-${{ secrets.EC2_PUBLIC_IP }}}"
        
        # Copy deployment package to EC2
        scp deploy.tar.gz ec2-user@$EC2_IP:~/
        
        # Extract and deploy
        ssh ec2-user@$EC2_IP << EOF
          mkdir -p ~/hrgoat-app
          tar -xzf deploy.tar.gz -C ~/hrgoat-app
          cd ~/hrgoat-app
          ./deploy.sh
        EOF
        
    # Verify deployment
    - name: Verify Deployment
      run: |
        EC2_IP="${EC2_PUBLIC_IP:-${{ secrets.EC2_PUBLIC_IP }}}"
        
        echo "Waiting for application to start..."
        sleep 10
        
        # Check if the application is running
        if curl -s "http://$EC2_IP:5001/api/test-connection" | grep -q "success"; then
          echo "Application deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "Application URL: http://$EC2_IP:5001" >> $GITHUB_STEP_SUMMARY
        else
          echo "Application deployment verification failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi 